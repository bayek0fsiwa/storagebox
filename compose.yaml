services:
  app:
    image: storagebox-v1
    build:
      context: .
      dockerfile: Dockerfile
    container_name: storagebox-container
    env_file:
      - .env
    environment:
      - UV_CACHE_DIR=/tmp/uvcache
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - storagebox-network
    # Dev
    command: uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    # Prod
    # command: gunicorn src.main:app --bind 0.0.0.0:8000 --worker-class uvicorn.workers.UvicornWorker
    volumes:
      - ./logs:/app/logs:rw
    restart: unless-stopped
    labels:
      - logging=storagebox
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "7"
    develop:
      watch:
        # Rebuilds the image if the dependency files change
        - action: rebuild
          path: pyproject.toml
        - action: rebuild
          path: uv.lock
        # Syncs your source code changes into the container without a rebuild
        - action: sync
          path: ./src
          target: /app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: pytest_runner
    volumes:
      - uv-cache:/home/appuser/.cache/uv
    environment:
      - PYTHONPATH=/app
      - UV_CACHE_DIR=/home/appuser/.cache/uv 
      - PYTHONUNBUFFERED=1
    networks:
      - storagebox-network
    working_dir: /app
    env_file:
      - .env
    depends_on:
      app:
        condition: service_healthy
    command: >
      sh -c 'find /app/src /app/tests /app/pytest.ini | entr -r pytest --rootdir=/app'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - storagebox-network
    depends_on:
      - loki
      - prom-server
    restart: unless-stopped
  
  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      # Mount the config directory instead of the single file
      - ./monitoring-configs:/etc/loki
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - storagebox-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - ./monitoring-configs:/etc/promtail
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - storagebox-network
    depends_on:
      - loki
    restart: unless-stopped
  
  prom-server:
    image: prom/prometheus
    container_name: prometheus-container
    ports:
      - "9090:9090"
    expose:
      - 9090
    volumes:
      - ./monitoring-configs:/etc/prometheus/prometheus.yaml:ro
    networks:
      - storagebox-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  loki-data:
  grafana-data:
  uv-cache:
  # storagebox-data:
  # app_logs:

networks:
  storagebox-network:
    driver: bridge
